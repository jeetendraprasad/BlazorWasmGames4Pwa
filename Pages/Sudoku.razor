@page "/sudoku"
@using System.Text.Json

@inject SweetAlertService swal
@inject IJSRuntime JS

<script type="text/javascript">

    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>


<h3>Sudoku V2.4</h3>

<div>
    <h3>Enter Dimensions</h3>
    <input type="number" name="rows_size" id="rows_size" placeholder="Rows" @bind-value:get="_sudokuUi.RowsBlock" @bind-value:set='(value) => this.OnChangeGridSize(value, "rows_size")' @bind-value:event="onchange" />
    <input type="number" name="cols_size" id="cols_size" placeholder="Cols" @bind:get="_sudokuUi.ColsBlock" @bind:set='async (value) => await this.OnChangeGridSize(value, "cols_size")' @bind:event="oninput" />

    <br />
    <br />

    <button class="btn btn-primary" style='visibility: @(_sudokuUi.GridUpdated ? "visible" : "hidden");' @onclick="OnChangeGrid">Reset Data &amp; Update Grid ?</button>

    <br />
    <br />

</div>

<div style="@_sudokuUi.GetSodukuStyle()">
    @foreach (var item in _sudokuUi.Positions)
    {
        string cellInputId = item.Key + ":I";
        bool cellValueClashing = item.Value.CellValueClashing;
        //Console.WriteLine($"For cell {item.Key} CellValueClashing = {cellValueClashing}");
        <div style="@_sudokuUi.GetCellStyle(item.Key)" id="@item.Key">
            @cellInputId
            <input type="number" style="@SudokuUi.GetInputStyle(cellValueClashing)" id="@cellInputId"
                   min="0" max="@(Math.Sqrt(_sudokuUi.Positions.Count))" step="1"
                   @bind-value:get="item.Value.CellValue" @bind-value:set='(value) => this.OnChangeCellInput(value, item.Key)' @bind-value:event="onchange" />
            @*             <br /> *@
            @for (int m = 0; m < item.Value.Hints.Count; m++)
            {
                string hintId = item.Value.Hints[m].HintId;
                int hintNo = item.Value.Hints[m].HintNo;
                bool hintEnabled = item.Value.Hints[m].HintEnabled;
                <button type="button" style="@SudokuUi.GetButtonStyle()" disabled="@(!hintEnabled)" id="@hintId" @onclick="(e => OnClickHintBtn(hintId))">@hintNo</button>
            }
        </div>
    }
</div>

<br />
<button type="button" class="btn btn-secondary" id="undoMoveBtn" @onclick="OnClickUndoBtn">Undo last move</button>

<br />
<br />
<button type="button" class="btn btn-warning" id="nextTipMoveBtn" @onclick="OnNextTipBtn">Next Tip</button>

<br />
<br />
<div class="card mb-2">
    <div class="card-body d-flex flex-row">
        <span class="flex-fill fw-bolder text-end p-1"> Load Game </span>
        <InputFile class="form-control form-control-sm" OnChange="SudokuFileUpload" />
    </div>

    <button type="button" class="btn btn-sm btn-primary" @onclick="SudokuFileDownload">
        <i class="bi bi-download me-1"></i>
        Save Game
    </button>
</div>


@code {

}
